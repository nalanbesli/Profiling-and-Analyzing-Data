Part 1: Yelp Dataset Profiling and Understanding


1. Profile the data by finding the total number of records for each of the tables below:
        
i. Attribute table = 1000
SELECT count(*) FROM attribute


ii. Business table = 1000
SELECT count(*) FROM business


iii. Category table = 1000
SELECT count(*) FROM category


iv. Checkin table = 1000
SELECT count(*) FROM checkin


v. elite_years table = 1000
SELECT count(*) FROM elite_years


vi. friend table =  1000
SELECT count(*) FROM friend


vii. hours table = 1000
SELECT count(*) FROM hours


viii. photo table = 1000
SELECT count(*) FROM photo


ix. review table = 1000 
SELECT count(*) FROM review


x. tip table = 1000
SELECT count(*) FROM tip


xi. user table = 1000
SELECT count(*) FROM user




2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.
Business = 10000 (id)
SELECT count(distinct id) FROM business
Hours = 1562 (business_id)
SELECT count(distinct business_id) FROM hours
Category = 2643 (business_id)
SELECT count(distinct business_id) FROM category
Attribute = 1115 (business_id)
SELECT count(distinct business_id) FROM attribute
Review = 10000 (id), 8090 (business_id), 9581 (user_id)
SELECT count(distinct id), count(distinct business_id), count(distinct user_id) FROM review
Checkin = 493 (business_id)
SELECT count(distinct business_id) FROM checkin
Photo = 10000 (id), 6493 (business_id)
SELECT count(distinct id), count(distinct business_id) FROM photo
Tip = 3979 (business_id), 537 (user_id)
SELECT count(distinct business_id), count(distinct user_id) FROM tip
User = 10000 (id)
SELECT count(distinct id) FROM user
Friend = 11 (user_id)
SELECT count(distinct user_id) FROM friend
Elite_years = 2780 (user_id)
SELECT count(distinct user_id) FROM elite_years


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.        




3. Are there any columns with null values in the Users table? Indicate "yes," or "no."
Answer: no
        
SQL code used to arrive at answer:


SELECT count(*) - count(id),
 count(*) - count(name),
 count(*) - count(review_count),
 count(*) - count(yelping_since),
 count(*) - count(useful),
 count(*) - count(cool),
 count(*) - count(fans),
 count(*) - count(average_stars),
 count(*) - count(compliment_hot),
 count(*) - count(compliment_more),
 count(*) - count(compliment_profile),
 count(*) - count(compliment_cute),
 count(*) - count(compliment_list),
 count(*) - count(compliment_note),
 count(*) - count(compliment_plain),
 count(*) - count(compliment_cool),
 count(*) - count(compliment_funny),
 count(*) - count(compliment_writer),
 count(*) - count(compliment_photos)
FROM user




4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:


        i. Table: Review, Column: Stars
SELECT min(stars), max(stars), avg(stars) FROM review
        
                Min: 1                max: 5                avg: 3.7082        
        
        ii. Table: Business, Column: Stars
SELECT min(stars), max(stars), avg(stars) FROM business


        
                Min: 1                max: 5                avg: 3.6549
                        
        iii. Table: Tip, Column: Likes
SELECT min(likes), max(likes), avg(likes) FROM tip


        
                Min: 0                max: 2                avg: 0.0144
        
        iv. Table: Checkin, Column: Count
SELECT min(count), max(count), avg(count) FROM checkin


        
                Min: 1                max: 53                avg: 1.9414
                
        v. Table: User, Column: Review_count
SELECT min(review_count), max(review_count), avg(review_count) FROM user


                Min: 0                max: 2000                avg: 24.2995
                


5. List the cities with the most reviews in descending order:


SQL code used to arrive at answer:


SELECT city, SUM(review_count)
FROM business
GROUP BY city
ORDER BY SUM(review_count) DESC
        
        Copy and Paste the Result Below:
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)


        
6. Find the distribution of star ratings to the business in the following cities:


i. Avon


SQL code used to arrive at answer:
SELECT stars AS star_rating, count(stars) AS count
FROM business
WHERE city='Avon'
GROUP BY stars
Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+




ii. Beachwood


SQL code used to arrive at answer:
SELECT stars AS star_rating, count(stars) AS count
FROM business
WHERE city='Beachwood'
GROUP BY stars
Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+




7. Find the top 3 users based on their total number of reviews:
                
        SQL code used to arrive at answer:
SELECT name, sum(review_count) AS total_count
FROM user
GROUP BY id
ORDER BY total_count DESC
LIMIT 3
        
        
        
        Copy and Paste the Result Below:
+--------+-------------+
| name   | total_count |
+--------+-------------+
| Gerald |        2000 |
| Sara   |        1629 |
| Yuri   |        1339 |
+--------+-------------+        
8. Does posing more reviews correlate with more fans?


        Please explain your findings and interpretation of the results:
Yes, users with more reviews tend to have more fans. it is correlated. 
Code:
SELECT range AS fans_range, COUNT(*) AS num_user,
AVG(review_count) AS avg_num_review,    
AVG(fans) AS avg_num_fans
FROM (SELECT CASE WHEN fans BETWEEN 0 AND 9 THEN '0 - 9'
                 WHEN fans BETWEEN 10 AND 99 THEN '10 - 99'
                 ELSE '100-1000' END AS range, review_count, fans
                 FROM user) AS subtable
GROUP BY subtable.range




+------------+----------+----------------+----------------+
| fans_range | num_user | avg_num_review |   avg_num_fans |
+------------+----------+----------------+----------------+
| 0 - 9      |     9690 |  15.0085655315 | 0.447265221878 |
| 10 - 99    |      294 |  283.326530612 |  25.5986394558 |
| 100-1000   |       16 |          891.5 |         189.75 |
+------------+----------+----------------+----------------+        


        
9. Are there more reviews with the word "love" or with the word "hate" in them?


        Answer: More reviews with "love".


        SQL code used to arrive at answer:
SELECT reaction, count(*) count
FROM ( SELECT CASE WHEN LOWER(text) LIKE '%love%' THEN 'love'
                 WHEN LOWER(text) LIKE '%hate%' THEN 'hate'
                 ELSE NULL END AS reaction
     FROM review)
GROUP BY reaction
ORDER BY count DESC




+----------+-------+
| reaction | count |
+----------+-------+
|     None |  8042 |
|     love |  1780 |
|     hate |   178 |
+----------+-------+
        
10. Find the top 10 users with the most fans:


        SQL code used to arrive at answer:
SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10


        Copy and Paste the Result Below:


+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
                


Part 2: Inferences and Analysis


1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
        
i. Do the two groups you chose to analyze have a different distribution of hours?


SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
   WHEN stars >= 2.0 THEN '2-3 stars'
   ELSE 'below 2' END AS 'STARS',             
   COUNT(DISTINCT business.id) AS id_count,          
   COUNT(hours) AS open_days_total,   -- number of openning days      
   COUNT(hours)*1.0 / COUNT(DISTINCT business.id)  AS open_days_avg
FROM ((business INNER JOIN hours ON business.id = hours.business_id)
   INNER JOIN category ON business.id = category.business_id)
WHERE city = 'Las Vegas' AND category.category ='Food'
GROUP BY STARS




+-----------+----------+-----------------+---------------+
| STARS     | id_count | open_days_total | open_days_avg |
+-----------+----------+-----------------+---------------+
| 2-3 stars |        1 |               7 |           7.0 |
| 4-5 stars |        1 |               6 |           6.0 |
+-----------+----------+-----------------+---------------+
-There is no huge difference in openning days between the two groups.




ii. Do the two groups you chose to analyze have a different number of reviews?
SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
   WHEN stars >= 2.0 THEN '2-3 stars'
   ELSE 'below 2' END AS 'STARS',             
   COUNT(DISTINCT business.id) AS id_count,          
   SUM(review_count) AS review_count_total,
   SUM(review_count)*1.0/COUNT(DISTINCT business.id)  AS review_count_avg
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Food'
GROUP BY STARS


  
+-----------+----------+--------------------+------------------+
| STARS     | id_count | review_count_total | review_count_avg |
+-----------+----------+--------------------+------------------+
| 2-3 stars |        1 |                  6 |              6.0 |
| 4-5 stars |        1 |                 30 |             30.0 |
+-----------+----------+--------------------+------------------+
-There is huge difference in the total number of review between the two groups, 6 & 30. The group with 4~5 stars have five times more number of reivew than the other group.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.


SQL code used for analysis:
SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
          WHEN stars >= 2.0 THEN '2-3 stars'
          ELSE 'below 2' END AS 'STARS',
     business.neighborhood,
     business.address,
     business.postal_code
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Food'
ORDER BY STARS


+-----------+--------------+-----------------------------+-------------+
| STARS     | neighborhood | address                     | postal_code |
+-----------+--------------+-----------------------------+-------------+
| 2-3 stars | Eastside     | 3808 E Tropicana Ave        | 89121       |
| 4-5 stars | Southeast    | 8975 S Eastern Ave, Ste 3-B | 89123       |
+-----------+--------------+-----------------------------+-------------+        
-The shops with 2-3 stars is placed at Eastside, but the shop with higher stars is placed at Southeastare.


                
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.


i. Difference 1: The number of open-business is bigger than closed-business .
         
         
ii. Difference 2: Number of review and average of stars are bigger for open-business. 


        
SQL code used for analysis:
SELECT is_open,
      COUNT(distinct business.id) num_business,
      COUNT(distinct review.id) num_review,
      AVG(review.stars) avg_stars
FROM business
JOIN review ON business.id =  review.business_id
GROUP BY is_open


+---------+--------------+------------+---------------+
| is_open | num_business | num_review |     avg_stars |
+---------+--------------+------------+---------------+
|       0 |           61 |         71 | 3.64788732394 |
|       1 |          446 |        565 |  3.7610619469 |
+---------+--------------+------------+---------------+        
        
        
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.


Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
        
i. Indicate the type of analysis you chose to do:


-What are the most successful businesses?      
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:


I calculate the average of stars and the openings for find the most successful business.  I only calculated 10 or more businesses.


We can see that "Buy N Cell" is the most successful business with 4.21 average stars and 0.83 open days. Than we can see "Oaks Golf Course", "Cardiac Solutions" and so fort.
             
                  
iii. Output of your finished dataset:
+---------------------------------------------+------------------------+--------------+-----------+------------+
| name                                        | category               | num_business | avg_stars | avg_isopen |
+---------------------------------------------+------------------------+--------------+-----------+------------+
| Buy N Cell                                  | Local Services         |           12 |      4.21 |       0.83 |
| Oaks Golf Course                            | Active Life            |           10 |      4.15 |        1.0 |
| Cardiac Solutions                           | Health & Medical       |           17 |      4.09 |       0.94 |
| Bella Terra Condominiums At Paradise Valley | Home Services          |           16 |       4.0 |       0.94 |
| Buy N Cell                                  | Shopping               |           30 |      3.98 |       0.83 |
| Gorgeous Glo                                | Beauty & Spas          |           13 |      3.88 |       0.92 |
| Bootleggers Modern American Smokehouse      | American (Traditional) |           11 |      3.82 |       0.73 |
| The Kosher Gourmet                          | Food                   |           23 |      3.78 |       0.87 |
| Restaurant Rosalie                          | Bars                   |           17 |       3.5 |       0.65 |
| Restaurant Rosalie                          | Nightlife              |           20 |      3.48 |        0.6 |
| Edulis                                      | Restaurants            |           71 |      3.46 |       0.75 |
+---------------------------------------------+------------------------+--------------+-----------+------------+
         
iv. Provide the SQL code you used to create your final dataset:
SELECT b.name, b.city, c.category,
      count(b.id) num_business,
      round(avg(b.stars),2) avg_stars,
      round(avg(b.is_open),2) avg_isopen
FROM (business AS b INNER JOIN category AS c ON b.id = c.business_id)
GROUP BY c.category
HAVING num_business > 10
ORDER BY avg_stars DESC, avg_isopen DESC